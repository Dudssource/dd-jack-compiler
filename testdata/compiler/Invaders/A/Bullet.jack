// This file is part of DD JACK Invaders.
// Copyright (C) 2025-2025 Eduardo <dudssource@gmail.com>
//
// DD JACK Invaders is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// DD JACK Invaders is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with DD JACK Invaders.  If not, see <http://www.gnu.org/licenses/>.
/**
 * A bullet represents a mid-air bullet fired by the ship.
 */
class Bullet {
    field int x, y;
    field int size;

    /** Constructs a new bullet **/
    constructor Bullet new(int bx, int by, int bsize) {
        let x = bx;
        let y = by;
        let size = bsize;
        do draw();
        return this;
    }

    /** Disposes this bullet. */
    method void dispose() {
        do Screen.setColor(false);
        do Screen.drawRectangle(x, y, x + size, y + size);
        do Screen.setColor(true);
        do Memory.deAlloc(this);
        return;
    }

    /** Checks if the bullet went out of screen **/
    method boolean gone() {
        if (y > 0) {
            return false;
        }
        return true;
    }

    /** Get X coordinate **/
    method int getX() {
        return x;
    }

    /** Get Y coordinate **/
    method int getY() {
        return y;
    }

    /** Moves this bullet up by 2 pixels (if possible). */
    method void moveUp() {
        var boolean collision;
        var int p;
        if (y > 1) {
            // Erases the bottom two rows of this square in its current location
            do Screen.setColor(false);
            do Screen.drawRectangle(x, (y + size) - 1, x + size, y + size);
            let y = y - 2;
            // Draws the top two rows of this square in its new location
            do Screen.setColor(true);
            do Screen.drawRectangle(x, y, x + size, y + 1);

        } else {
            let y = 0; // mark gone
        }
        return;
    }

    /** Draws this bullet in its current (x,y) location */
    method void draw() {
        // Draws the bullet using the color black
        do Screen.setColor(true);
        do Screen.drawRectangle(x, y, x + size, y + size);
        return;
    }
}